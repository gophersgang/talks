Sourcegraph: A large-scale code search engine in Go
Google I/O 2014
15:10 25 Jun 2014
Tags: googleio, go, sourcegraph

Quinn Slack
Sourcegraph
[[https://sourcegraph.com]]
@sqs
@srcgraph

# Speaker notes are on lines beginning with ">". On the presentation web page, hit 'n' to toggle displaying the notes.

####################################################################################################
# OVERVIEW
####################################################################################################

* Overview

- What is Sourcegraph?
- Why Go?
- How we built Sourcegraph using Go

Video at [[https://www.youtube.com/watch?v=-DpKaoPz8l8]]

Blog post at [[https://sourcegraph.com/blog/google-io-2014-building-sourcegraph-a-large-scale-code-search-engine-in-go]]
















# Google I/O 2014 schedule links:
#
# Jun 25 3:10 PM - 3:55 PM: https://www.google.com/events/io/schedule/session/5e5915de-0ce1-e311-b297-00155d5066d7
#
# Jun 26 10:05 AM - 10:50 AM: https://www.google.com/events/io/schedule/session/0632a768-0de1-e311-b297-00155d5066d7


* Sourcegraph: a code search engine written in Go

- Analyzes & indexes open-source code on GitHub, Google Code, etc.
- Shows all usage examples of any function/etc., across the open-source world
- Searches by function, type, package, etc. (not just full-text search)
- Supports Go, Python, JavaScript, Ruby, and (soon) Java

Free and (mostly) open source: [[https://sourcegraph.com][sourcegraph.com]]













* Demo

.image sourcegraph-search-screenshot.png 262 841
.image sourcegraph-code-screenshot.png 305 966


* Why Go?

Sourcegraph has been written in Go since day 1.

- Prototyping Sourcegraph in Go was easy thanks to `go/doc` and `go/types`.

Sourcegraph was inspired by Go. What if every language had a `godoc` that:

- works on any codebase (no configuration required)
- is public
- is globally searchable
- supports global cross-references (aka usage examples)




















* Building Sourcegraph with Go

* Parts

- A large Go web app with an HTML frontend, JSON API, and SQL DB
- A standalone Go CLI tool that builds and analyzes projects' code






* Part 1: structure of a large Go web app



.image webappstruct.svg 610 1050
















* Implementation: avoiding complexity and repetition

- No framework
- Using interfaces
- High-quality API client as a side effect
- Unifying URL routing and generation
- Sharing parameter structs
# - Caching
# - Errors
# - Pagination
# - Response metadata (such as total result counts)
# - Mocking













* No framework

We define our handlers with an error return:

 func serveXYZ(w http.ResponseWriter, r *http.Request) error { ... }

Plus a simple wrapper function to make them `http.Handler`, check auth, etc.

Uses global vars instead of per-request context for DB, config, etc.

Routes with gorilla/mux.

Renders HTML:

 func executeTemplate(req *http.Request, resp http.ResponseWriter, tmplName string,
                      status int, header http.Header, tmplData interface{}) error { ... }

Writes JSON:

 func writeJSON(w http.ResponseWriter, v interface{}) error { ... }



















* Unify API client and data store interfaces

The API client and data store should both implement the same interfaces:

.code p3/app.go /START SVC/,/END SVC/

- API client methods fetch from HTTP API
- Data store methods fetch from the DB


















* Data store methods

.code p3/app.go /START STORE/,/END STORE/




* API client methods

.code p3/app.go /START CLIENT/,/END CLIENT/








* Simpler frontend and API http.Handlers

Frontend handler:

.play p3/app.go /START FRONTEND/,/END FRONTEND/

API handler:

 var repoStore RepositoriesService = &repoStore{dbh}

 func serveRepository(w http.ResponseWriter, r *http.Request) error {
 	rp, err := repoStore.Get(mux.Vars(r)["Repo"])
 	if err != nil {
 		return repositoryError(err)
 	}
        writeLastModifiedHeader(rp.UpdatedAt)
 	return writeJSON(w, rp)
 }











* Other API benefits

- Dogfooding our API improves quality.
- We can use standard HTTP load balancing, caching, and authz schemes in our API.







* Unifying URL routing and generation

Separate the route definition from the mounting of handlers:

.code p3/app.go /START API ROUTER/,/END API ROUTER/











* Generating URLs using the router

In your API client, generate the URL from the corresponding route definition:

.code p3/app.go /START CLIENT LIST/,/END CLIENT LIST/










* Sharing parameter structs

.code p3/app.go /START SEARCH OPTIONS/,/END SEARCH OPTIONS/

.play p3/app.go /START API SEARCH/,/END API SEARCH/

.code p3/app.go /START CLIENT SEARCH/,/END CLIENT SEARCH/
























* Other things we did

- Instrumented `http.Handlers` and API client `http.Transport` to track timing info using [[appmon][https://github.com/sourcegraph/appmon]]
- Pass along typed error values from the data store to the frontend
- Define a common interface for response pagination
- Consolidate caching logic in the API
- Made test mocks of the interfaces


















* Part 2: a standalone CLI tool that builds and analyzes projects' code

####################################################################################################
# HANDLER SYSTEM
####################################################################################################

* Why code analysis?

Just indexing the raw text of source files isn't good enough:

- Search results should be definitions (funcs, etc.), not just files that contain the term.
- Search results should be ranked by usage, quality, recency, etc., not term frequency.
- Source files should be fully linked so every identifier lets you jump-to-definition.
- Functions should show you usage examples of everywhere else they're called.



















* What is code analysis?

Sourcegraph analyzes code:

- Every definition (func, type, etc.) and its type, package, visibility, etc.
- Every identifier and the definition it refers to
- Other info: dependencies, authorship, etc.

Requires:

- Parsing AST
- Type checking/inference
- Installing dependencies
- Compilation















* Analysis output

.code mypkg/myfile.go

 ~/src/github.com/sqs/mypkg $ srcgraph make
 {"Definitions": [
    {"Name": "Greet", "Kind": "func",
     "File": "myfile.go", "DefStart": 30, "DefEnd": 68,
     "Exported": true, "Type": "func(salutation string)"},
    ...
  ],
  "References": [
    {"DefRepo": "code.google.com/p/go", "DefUnit": "fmt", "DefPath": "Println",
     "File": "myfile.go", "Start": 49, "End": 56}, ...
  ]
 }














* Go helps make our CLI tool:

- Easy to distribute
- Easy to build from source
- Composable
- Extensible







* Easy to distribute

- ~25 MB static, cross-compiled binary
- No system or library dependencies
- Anyone can download it and run it immediately









* Easy to compile

 go install github.com/sourcegraph/srcgraph




















* Easy to compose

`srcgraph`make` produces a standard Makefile describing the analysis
process.

The Makefile's recipes in turn call other `srcgraph` subcommands:

 ~/src/github.com/golang/groupcache$ srcgraph make -print-makefile

 # Resolve dependencies of groupcache
 .sourcegraph-data/groupcache@GoPackage_deps.json: *.go
     srcgraph resolve-deps -json $^ > $@

 # Dump definitions and references in groupcache
 .sourcegraph-data/groupcache@GoPackage_graph.json: *.go
     srcgraph graph -json $^ > $@

 # Attribute each definition in groupcache to its authors
 .sourcegraph-data/groupcache@GoPackage_authorship.json: .sourcegraph-data/groupcache@GoPackage_graph.json
     srcgraph authorship -json $^ > $@

#and then uses [[https://github.com/sourcegraph/makex][makex]] to execute the Makefile.



























* So far, srcgraph make has:

- detected packages in the repository
- produced a Makefile with the analysis commands







* Language-specific analysis

- Core codebase is language-independent
- Language support is provided by implementations of Go interfaces:

.code lang/types.go /START 2 OMIT/,/END 2 OMIT/










* Example: simple JavaScript analyzer

We want to analyze:

.code javascript/sample.js

First implement `lang.Analyzer`:

 type Analyzer interface {
     // Analyze a package to find all definitions (funcs, types, vars, etc.) and references
     Analyze(pkg string) ([]*Def, []*Ref, error)
 }






* Example: simple JavaScript analyzer

.code javascript/js_handler.go /START OMIT/,/END OMIT/
.play javascript/jsdemo/jsdemo.go /START OMIT/,/END OMIT/

(Real analyzers perform type checking and inference and are written in their
target language.)



* Now what?

We've defined the analyzers, but how does the program know to call it to analyze `.js` files?

Ideas:

- Pass a list of available analyzers as an argument to every function ("context object")
- Make every function a method on some type holding a list of analyzers
- Register analyzers in a global list during initialization
















* "Where does the stdlib do something similar?"

- `http.Handle("/foo",`myHandler)`
- `sql.Register("postgresql",`pgdrv)`
- `crypto.RegisterHash(h,`f)`
- `signal.Notify(c,`syscall.SIGINT)`

"Don't ad-lib; just crib from the standard lib"







* And in open source Go projects...

[[https://github.com/dotcloud/docker/blob/51b188c5102e86ad453c933077bcaf9594070c28/engine/engine.go#L29][github.com/dotcloud/docker/engine/engine.go]]:

 type Handler func(*Job) Status

 var globalHandlers = make(map[string]Handler)

 func Register(name string, handler Handler) error {
   _, exists := globalHandlers[name]
   if exists {
     return fmt.Errorf("Can't overwrite global handler for command %s", name)
   }
   globalHandlers[name] = handler
   return nil
 }

[[https://github.com/benmanns/goworker/blob/ed77c6c17b88c15c0850b24236cac846b9179c26/workers.go#L15][github.com/benmanns/goworker/workers.go]]
[[https://github.com/russross/meddler/blob/308c3d0e5e45f543a2eb6c787cbfe0db3880e220/meddler.go#L35][github.com/russross/meddler/meddler.go]]
[[https://github.com/rcrowley/go-metrics/blob/6ffbdf30ba7072d9f9e2afe57ad651a75a544a83/registry.go#L156][github.com/rcrowley/go-metrics/registry.go]]
[[https://sourcegraph.com/search?q=golang+func+Register][List of Go funcs named Register]]




* Solution: mimic sql.Register/http.Handle/crypto.RegisterHash

A global variable + a `Register` function.

.code lang/registry.go

In the language-specific packages, register the handler:

.code javascript/register.go

Then import language-specific packages for side effects in your program (to call `init`).

.play handler_main/handler_main.go /START OMIT/,/END OMIT/







* Taking simplicity for granted

Remember that Register function that used a global var?

In other languages, that simple solution would be frowned upon.

- It uses static initializers, whose order and guarantees are often poorly defined.
- It uses global variables, which can make code harder to reuse, refactor, and test.

















* Go's design makes this simple solution OK

In Go:

- There are first-class global variables (not just singleton classes as in Java, etc.).
- Static initialization occurs serially in the sensible order and completes before `main()`.
- Each package's tests are run in a separate process, so they can safely modify global variables for testing.
- The stdlib and many official commands use it, which makes its use acceptable to the community. (Other communities might shun you for this solution.)







* Analysis complete!

We upload the analysis output (language-independent JSON representing code's definitions) to our API.

And the web app will display it.



* Sourcegraph: A large-scale code search engine in Go

- Q&A
- Try it out: [[https://sourcegraph.com][sourcegraph.com]]
- Slides will be on [[https://sourcegraph.com][sourcegraph.com/blog]] soon


Feedback and follow-ups?

Interested in using Sourcegraph to host docs & examples for your project?

Or joining us to build Sourcegraph?

Or t-shirts?

- Contact me: Quinn Slack at [[sqs@sourcegraph.com]] or [[@sqs]]
- [[@srcgraph]]




# * Architecture
#
# .image arch.svg 662 883
#
# > Here's our architecture. There are 3 main parts: the web server, which serves
# > an HTML frontend and a JSON API; the datastore, which hits PostgreSQL and our
# > distributed filesystem for Git and Mercurial data; and the code analyzer and
# > indexer, which runs as a background worker on our servers and you can also run
# > locally and upload the result to us.
# >
# > Everything except for the PostgreSQL and the distributed filesystem is written
# > in Go.
# >
